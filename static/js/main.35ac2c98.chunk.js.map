{"version":3,"sources":["components/FormEdit.js","App.js","reportWebVitals.js","index.js"],"names":["FormEdit","props","Edit","setState","editCondition","Save","Cancel","baseState","state","firstname","lastname","bind","handleChange","evt","this","target","name","value","className","id","onClick","type","onChange","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAyFeA,E,kDAtFb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAwBRC,KAAO,WAAO,EAAKC,SAAS,CAACC,eAAe,KAzB1B,EA2BlBC,KAAO,WACL,EAAKF,SAAS,CACZC,eAAe,KA7BD,EAiClBE,OAAS,WACP,EAAKH,SAAS,EAAKI,YA9BnB,EAAKC,MAAQ,CACXC,UAAWR,EAAMQ,UACjBC,SAAUT,EAAMS,SAChBN,eAAe,GAIjB,EAAKG,UAAY,EAAKC,MAGtB,EAAKN,KAAO,EAAKA,KAAKS,KAAV,gBACZ,EAAKN,KAAO,EAAKA,KAAKM,KAAV,gBACZ,EAAKL,OAAS,EAAKA,OAAOK,KAAZ,gBACd,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAjBJ,E,yDAkDLE,GACXC,KAAKX,SAAL,eAAgBU,EAAIE,OAAOC,KAAOH,EAAIE,OAAOE,U,+BAK7C,OAAiC,IAA7BH,KAAKN,MAAMJ,cAEX,sBAAKc,UAAU,WAAf,UACE,8BACE,gCAAQJ,KAAKN,MAAMC,cAGrB,8BACC,gCAAQK,KAAKN,MAAME,aAEpB,wBAAQS,GAAG,OAAOC,QAASN,KAAKZ,KAAhC,uBAMJ,uBAAMgB,UAAU,WAAhB,UACE,gDACA,uBAAOG,KAAK,OAAOL,KAAK,YAAYM,SAAUR,KAAKF,eACnD,gDACA,uBAAOS,KAAK,OAAOL,KAAK,WAAWM,SAAUR,KAAKF,eAJpD,IAIoE,uBAClE,wBAAQO,GAAI,OAAOC,QAASN,KAAKT,KAAjC,oBACA,wBAAQc,GAAG,SAASC,QAASN,KAAKR,OAAlC,6B,GA/EeiB,a,MCYRC,MAXf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,CACAT,UAAU,SACVC,SAAS,UCIAe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.35ac2c98.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass FormEdit extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    //properties\r\n    this.state = {\r\n      firstname: props.firstname,\r\n      lastname: props.lastname,\r\n      editCondition: false,\r\n    }\r\n\r\n    ///preserve the initial state in a new object\r\n    this.baseState = this.state\r\n\r\n    //binding functions\r\n    this.Edit = this.Edit.bind(this);\r\n    this.Save = this.Save.bind(this);\r\n    this.Cancel = this.Cancel.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    /*\r\n    this.handleFirstChange = this.handleFirstChange.bind(this);\r\n    this.handleLastChange = this.handleLastChange.bind(this);\r\n    */\r\n  }\r\n  \r\n  //called when edit is clicked\r\n  Edit = () => {this.setState({editCondition: true})}\r\n\r\n  Save = () => {\r\n    this.setState({\r\n      editCondition: false\r\n      })\r\n  }\r\n\r\n  Cancel = () => {\r\n    this.setState(this.baseState)\r\n    }\r\n  \r\n  /*\r\n  //handler for firstname\r\n  handleFirstChange(evt){\r\n    this.setState({firstname: evt.target.value});\r\n  }\r\n\r\n  //handler for lastname\r\n  handleLastChange(evt){\r\n    this.setState({lastname: evt.target.value});\r\n  }\r\n  */\r\n\r\n  //handler for first and last name\r\n  handleChange(evt){\r\n    this.setState({[evt.target.name]: evt.target.value});\r\n  }\r\n \r\n  render(){\r\n    //if edit is not clicked then keep the information\r\n    if (this.state.editCondition === false){\r\n      return (\r\n        <div className=\"formEdit\">\r\n          <div>\r\n            <label>{this.state.firstname}</label>\r\n          </div>\r\n\r\n          <div>\r\n           <label>{this.state.lastname}</label>\r\n          </div>\r\n          <button id=\"edit\" onClick={this.Edit}> Edit </button>\r\n        </div>\r\n      );\r\n    }\r\n    //else if edit is clicked\r\n    return (\r\n      <form className=\"formEdit\">\r\n        <label>First Name:</label>\r\n        <input type=\"text\" name=\"firstname\" onChange={this.handleChange}/>\r\n        <label>Last Name: </label>\r\n        <input type=\"text\" name=\"lastname\" onChange={this.handleChange}/> <br/>\r\n        <button id =\"save\" onClick={this.Save}> Save </button> \r\n        <button id=\"cancel\" onClick={this.Cancel}> Cancel </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default FormEdit;\r\n","import FormEdit from './components/FormEdit';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FormEdit\n      firstname=\"Daniel\"\n      lastname=\"Ho\"\n       />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}